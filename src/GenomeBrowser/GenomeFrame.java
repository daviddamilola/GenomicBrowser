/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package GenomeBrowser;

import GenomeBrowser.utilities.TextPaneUtil;
import au.com.bytecode.opencsv.CSVReader;
import java.awt.Component;
import java.awt.FileDialog;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.SwingWorker;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;

/**
 *
 * @author davidoluwasusi
 */
public class GenomeFrame extends javax.swing.JFrame {
    private String fastaPath;
    
    public JFrame getOwnFrame(){
        return this;
    }

    /**
     * Creates new form GenomeFrame
     */
    public GenomeFrame() {
        initComponents();
    }

    private String processSelectedFile(FileDialog nameBox) {
        try{
        String fileDirectory = nameBox.getDirectory();
        String fileName = nameBox.getFile();
        fileName = fileDirectory.concat(fileName);
        return fileName;
        }catch(Exception error){
        //an error occured return an empty path to trigger validation
        error.printStackTrace();
        return "";
        }
    }

    private Object[][] parseGtfFile(String filePath) {
        try (CSVReader reader = new CSVReader(new FileReader(filePath), '\t')) { // Tab-separated values
            List<Object[]> tableData = new ArrayList<>();
            String[] nextLine;

            while ((nextLine = reader.readNext()) != null) {
                // Skip comments or empty lines
                if (nextLine[0].strip().startsWith("#") || nextLine[0].isEmpty()) {
                    continue;
                }

                // Ensure the line has the expected number of columns (e.g., 9 fields)
                if (nextLine.length < 9) {
                    continue; // Skip invalid lines
                }

                // Parse relevant fields
                Object[] row = new Object[]{
                    nextLine[0], // Chromosome
                    nextLine[1], // Source
                    nextLine[2], // Feature
                    Integer.parseInt(nextLine[3]), // Start
                    Integer.parseInt(nextLine[4]), // End
                    nextLine[5], // Score
                    nextLine[6], // Frame
                    nextLine[8] // Attributes
                };

                tableData.add(row);
            }

            // Convert List<Object[]> to Object[][]
            Object[][] gtfData = tableData.toArray(new Object[0][]);

            return gtfData;
        } catch (Exception e) {
            System.out.println("Error parsing GTF file: " + e.getMessage());
            return new Object[0][];
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        rootPanel = new javax.swing.JPanel();
        geneDetailtabViewSection = new javax.swing.JTabbedPane();
        overviewTab = new javax.swing.JPanel();
        sequenceViewerOverview = new GenomeBrowser.SequenceViewer();
        tableViewerOverviewGtfTable = new GenomeBrowser.TableViewer();
        basicStatsTab = new javax.swing.JPanel();
        basicStatisticsPanelOverview = new GenomeBrowser.BasicStatisticsPanel();
        exploreGenesTab = new javax.swing.JPanel();
        geneExplorerOverview = new GenomeBrowser.GeneExplorer();
        fileUploadPanel5 = new GenomeBrowser.FileUploadPanel();
        fileUploadArea = new javax.swing.JPanel();
        gtfFileUploadButton = new javax.swing.JButton();
        fastaFileUploadButton = new javax.swing.JButton();
        fileSelectedLabel = new javax.swing.JLabel();
        fastaFileSelectedLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        rootPanel.setBackground(new java.awt.Color(255, 255, 255));

        geneDetailtabViewSection.setToolTipText("");

        javax.swing.GroupLayout overviewTabLayout = new javax.swing.GroupLayout(overviewTab);
        overviewTab.setLayout(overviewTabLayout);
        overviewTabLayout.setHorizontalGroup(
            overviewTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(sequenceViewerOverview, javax.swing.GroupLayout.DEFAULT_SIZE, 953, Short.MAX_VALUE)
            .addGroup(overviewTabLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tableViewerOverviewGtfTable, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        overviewTabLayout.setVerticalGroup(
            overviewTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(overviewTabLayout.createSequentialGroup()
                .addComponent(tableViewerOverviewGtfTable, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sequenceViewerOverview, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(66, Short.MAX_VALUE))
        );

        geneDetailtabViewSection.addTab("Overview", overviewTab);

        javax.swing.GroupLayout basicStatsTabLayout = new javax.swing.GroupLayout(basicStatsTab);
        basicStatsTab.setLayout(basicStatsTabLayout);
        basicStatsTabLayout.setHorizontalGroup(
            basicStatsTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(basicStatsTabLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(basicStatisticsPanelOverview, javax.swing.GroupLayout.DEFAULT_SIZE, 941, Short.MAX_VALUE)
                .addContainerGap())
        );
        basicStatsTabLayout.setVerticalGroup(
            basicStatsTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(basicStatsTabLayout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(basicStatisticsPanelOverview, javax.swing.GroupLayout.PREFERRED_SIZE, 323, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(383, Short.MAX_VALUE))
        );

        geneDetailtabViewSection.addTab("Basic Statistics", basicStatsTab);

        javax.swing.GroupLayout exploreGenesTabLayout = new javax.swing.GroupLayout(exploreGenesTab);
        exploreGenesTab.setLayout(exploreGenesTabLayout);
        exploreGenesTabLayout.setHorizontalGroup(
            exploreGenesTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(geneExplorerOverview, javax.swing.GroupLayout.DEFAULT_SIZE, 953, Short.MAX_VALUE)
        );
        exploreGenesTabLayout.setVerticalGroup(
            exploreGenesTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(exploreGenesTabLayout.createSequentialGroup()
                .addComponent(geneExplorerOverview, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 16, Short.MAX_VALUE))
        );

        geneDetailtabViewSection.addTab("Explore Genes", exploreGenesTab);

        gtfFileUploadButton.setText("upload .gtf File");
        gtfFileUploadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gtfFileUploadButtonActionPerformed(evt);
            }
        });

        fastaFileUploadButton.setText("upload .fa file");
        fastaFileUploadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fastaFileUploadButtonActionPerformed(evt);
            }
        });

        fileSelectedLabel.setText("ONLY GTF AND FASTA FILES ARE SUPPORTED");

        javax.swing.GroupLayout fileUploadAreaLayout = new javax.swing.GroupLayout(fileUploadArea);
        fileUploadArea.setLayout(fileUploadAreaLayout);
        fileUploadAreaLayout.setHorizontalGroup(
            fileUploadAreaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fileUploadAreaLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(fileUploadAreaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(fileSelectedLabel)
                    .addComponent(fastaFileSelectedLabel)
                    .addGroup(fileUploadAreaLayout.createSequentialGroup()
                        .addComponent(gtfFileUploadButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(fastaFileUploadButton)))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        fileUploadAreaLayout.setVerticalGroup(
            fileUploadAreaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fileUploadAreaLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(fileUploadAreaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(gtfFileUploadButton)
                    .addComponent(fastaFileUploadButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(fileSelectedLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(fastaFileSelectedLabel)
                .addContainerGap(20, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout rootPanelLayout = new javax.swing.GroupLayout(rootPanel);
        rootPanel.setLayout(rootPanelLayout);
        rootPanelLayout.setHorizontalGroup(
            rootPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(geneDetailtabViewSection)
            .addComponent(fileUploadArea, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(fileUploadPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        rootPanelLayout.setVerticalGroup(
            rootPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(rootPanelLayout.createSequentialGroup()
                .addComponent(fileUploadPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(fileUploadArea, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(geneDetailtabViewSection)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(rootPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(rootPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public static Map<String, List<int[]>> parseExons(String filePath) {
        Map<String, List<int[]>> exonData = new HashMap<>();

        try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {
            String line;
            while ((line = reader.readLine()) != null) {
                if (line.startsWith("#")) {
                    continue; // Skip comments
                }
                String[] columns = line.split("\t");
                if (columns.length < 9 || !"exon".equals(columns[2])) {
                    continue; // Skip non-exon entries
                }
                try {
                    int start = Integer.parseInt(columns[3]);
                    int end = Integer.parseInt(columns[4]);
                    String attributes = columns[8];
                    String geneId = BasicStatisticsCalculator.getAttribute(attributes, "gene_name");

                    exonData.computeIfAbsent(geneId, k -> new ArrayList<>()).add(new int[]{start, end});
                } catch (NumberFormatException e) {
                    // Handle invalid start or end values
                    System.err.println("Invalid number format in line: " + line);
                }
            }
        } catch (IOException e) {
            
            // Log the exception and return an empty map
            System.err.println("Error reading GTF file: " + e.getMessage());
            JOptionPane.showMessageDialog(
                    null,
                    "Cannot get exons from file, Gtf file is corrupt",
                    "File Selection Error",
                    JOptionPane.ERROR_MESSAGE
            );
        }
        return exonData;
    }
    

    
    private void gtfFileUploadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gtfFileUploadButtonActionPerformed
        // TODO add your handling code here:
        FileDialog nameBox;
        nameBox = new FileDialog(this, "Open .gtf File",
                FileDialog.LOAD);
        // Display the file chooser dialog & wait
        nameBox.setVisible(true);
        String namePath = processSelectedFile(nameBox);

        // Validate file extension
        if (namePath.endsWith(".gtf")) {
            fileSelectedLabel.setText("Selected GTF file: " + nameBox.getFile());
        } else {
            JOptionPane.showMessageDialog(
                    this,
                    "Invalid file type. Please select a valid .gtf file.",
                    "File Selection Error",
                    JOptionPane.ERROR_MESSAGE
            );
        }
        // Define column headers
        String[] columnHeaders = {
            "Chromosome", "Source", "Feature", "Start", "End", "Score", "Frame", "Attributes"
        };

        // Parse data from the GTF file
        Object[][] tableData = parseGtfFile(namePath);
        var exonData = parseExons(namePath);
   
        // save the parsed Exons for highlighting later
        sequenceViewerOverview.setParsedExons(exonData);
        geneExplorerOverview.setParsedExons(exonData);

        BasicStatisticsCalculator calculator = new BasicStatisticsCalculator();
        var statistics = calculator.calculateGTFStats(tableData);
        StringBuilder statsString = new StringBuilder("GTF File Stats:").append("\n");
        statistics.forEach((key, value) -> statsString.append(key + ": " + value).append("\n"));
        
        var currentText = String.join("\n", basicStatisticsPanelOverview.getTextPane().getText());
        basicStatisticsPanelOverview.getTextPane().setText(currentText.concat("\n").concat(statsString.toString()));
    

        // Get the JTable from TableViewer
        JTable tablePane = tableViewerOverviewGtfTable.getTablePane();

        // Update the JTable model with the parsed data
        javax.swing.table.DefaultTableModel model = new javax.swing.table.DefaultTableModel(tableData, columnHeaders) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false; // Make the table cells non-editable
            }
        };
        tablePane.setModel(model);
        tablePane.setAutoResizeMode(JTable.AUTO_RESIZE_OFF); // Allow horizontal scrolling
        for (int i = 0; i < tablePane.getColumnCount(); i++) {
            TableColumn column = tablePane.getColumnModel().getColumn(i);
            int preferredWidth = 150; // Minimum width for all columns
            for (int row = 0; row < tablePane.getRowCount(); row++) {
                TableCellRenderer renderer = tablePane.getCellRenderer(row, i);
                Component comp = tablePane.prepareRenderer(renderer, row, i);
                preferredWidth = Math.max(comp.getPreferredSize().width, preferredWidth);
            }
            column.setPreferredWidth(preferredWidth);
        }

    }//GEN-LAST:event_gtfFileUploadButtonActionPerformed


    private void fastaFileUploadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fastaFileUploadButtonActionPerformed
        // TODO add your handling code here:
        // Display the file chooser dialog on the EDT
    FileDialog nameBox = new FileDialog(this, "Open .fasta File", FileDialog.LOAD);
    nameBox.setVisible(true); // FileDialog is modal, so this won't block the UI

    // Process the selected file
    String namePath = processSelectedFile(nameBox);
    if (namePath != null && namePath.endsWith(".fa")) {
        fastaPath = namePath;
        geneExplorerOverview.setExplorerFastaFilePath(fastaPath);
        // Start background processing
        new SwingWorker<Void, Void>() {
            @Override
            protected Void doInBackground() {
                // Load the FASTA file in a background thread
                TextPaneUtil.toggleApplicationLoader(getOwnFrame(), true);
                sequenceViewerOverview.loadupFastaFile(
                        namePath,
                        basicStatisticsPanelOverview.getTextPane(),
                        geneExplorerOverview
                );
                
                return null;
            }

            @Override
            protected void done() {
                // Update the UI once processing is complete
                fastaFileSelectedLabel.setText("Selected Fasta file: " + nameBox.getFile());
                
            }
        }.execute();
    } else {
        // Handle invalid file selection
        JOptionPane.showMessageDialog(
                this,
                "Invalid file type. Please select a valid .fa file.",
                "File Selection Error",
                JOptionPane.ERROR_MESSAGE
        );
    }
    }//GEN-LAST:event_fastaFileUploadButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GenomeFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GenomeFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GenomeFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GenomeFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GenomeFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private GenomeBrowser.BasicStatisticsPanel basicStatisticsPanelOverview;
    private javax.swing.JPanel basicStatsTab;
    private javax.swing.JPanel exploreGenesTab;
    private javax.swing.JLabel fastaFileSelectedLabel;
    private javax.swing.JButton fastaFileUploadButton;
    private javax.swing.JLabel fileSelectedLabel;
    private javax.swing.JPanel fileUploadArea;
    private GenomeBrowser.FileUploadPanel fileUploadPanel5;
    private javax.swing.JTabbedPane geneDetailtabViewSection;
    private GenomeBrowser.GeneExplorer geneExplorerOverview;
    private javax.swing.JButton gtfFileUploadButton;
    private javax.swing.JPanel overviewTab;
    private javax.swing.JPanel rootPanel;
    private GenomeBrowser.SequenceViewer sequenceViewerOverview;
    private GenomeBrowser.TableViewer tableViewerOverviewGtfTable;
    // End of variables declaration//GEN-END:variables
}
